#! /bin/bash

# jsession by Joseph Lansdowne

# Licensed under the GNU General Public License, version 3; if this was not
# included, you can find it here:
#     http://www.gnu.org/licenses/gpl-3.0.txt

# TODO: remove noinit (doesn't work, or make sense)
# TODO: install systemd file on make, using correct path in ExecStart; remove it from pkgbuild and website (file + link)

startup_code=4

conf=$1
if [ "$conf" = "-h" ] || [ "$conf" = "--help" ]; then
    echo "jsession: a tiny session manager.

Usage:

    jsession [conf]

conf is a configuration file (Bash source file) defining init and noinit as
':'-separated files to read; it defaults to /etc/jsession/conf.  Lines in each
'init' file are executed as commands if they are not in any 'noinit' file.
Duplicate lines will be executed as many times as they appear, even across
multiple 'init' files.

Commands are executed using the shell specified in the \`SHELL' environment
variable, as \`SHELL -c COMMAND'.

On login, the file ~/.profile is sourced, and all executable files in
/etc/jsession/startup are executed as root by the jsession daemon, if running
(using run-parts).

    jsession -h
    jsession --help

Display this help."
    exit 0
fi
# load config
default_conf=/etc/jsession/conf
if [ -z "$conf" ] || ! source "$conf" 2> /dev/null; then
    [ -n "$conf" ] &&
        echo "warning: config file doesn't exist; using defaults" 1>&2
    conf="$default_conf"
    source "$conf" 2> /dev/null || {
        echo "error: can't find default config file" 1>&2
        exit 1
    }
fi
# check we have a display
if [ -z "$DISPLAY" ]; then
    echo "error: can't determine current display" 1>&2
    exit 2
fi
disp=`echo $DISPLAY | cut -d"." -f1`
if [ -z "$SHELL" ]; then
    echo "error: SHELL environment variable is not set" 1>&2
    exit 2
fi

# create config dir if needed
home=~/.jsession
mkdir -p "$home"
# clean up running jsessions list
> "$home/running-temp"
cat "$home/running" | while read -r line; do
    pid=`echo $line | cut -d" " -f1`
    # copy to new file if still running
    [ "$(ps -p "$pid" -o comm=)" = jsession ] &&
        echo $line >> "$home/running-temp"
done
rm "$home/running"
mv "$home/running-temp" "$home/running"
# die if jsession already running on this display
running="$(grep " $disp$" "$home/running")"
if [ -n "$running" ]; then
    echo "error: jsession is already running on this display" 1>&2
    exit 3
fi

# start session bus
if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
    eval `dbus-launch --exit-with-session --sh-syntax`
else
    export DBUS_SESSION_BUS_ADDRESS
fi
# run startup scripts
reply="`dbus-send --system --type=method_call --print-reply \
        --dest=prog.jsession /prog/jsession prog.jsession.cmd \
        int16:$startup_code &> /dev/null`"
if [ $? -ne 0 ]; then
    if [ "${reply##*: }" = "couldn't run command" ]; then
        echo "warning: daemon couldn't run root startup scripts" 1>&2
    else
        echo "warning: couldn't run root startup scripts (is daemon" \
             "running?)" 1>&2
    fi
fi
# change to conf's directory so it can use relative paths
cd "$(dirname "$conf")"
# source login shell initialisation file
# TODO: is there a way to get the login shell to source it, then inherit its
#       environment?
# shell="$(grep "^$LOGNAME:" /etc/passwd)"
# shell="${shell##*/}"
# if [ "$shell" = zsh ]; then
#     source ~/.zprofile
# elif [ "$shell" = csh ] || [ "$shell" = tcsh ]; then
#     source ~/.login
# else # bash, sh, ksh, dash
#     echo .profile
#     source ~/.profile
# fi
source ~/.profile

# read lists of stuff to run into temporary files
copy_files () {
    if [ -z "$1" ]; then
        # no files: create destination and return
        > "$2"
        return
    fi
    files="$1:"
    while [ -n "$files" ]; do
        # get next file
        src="`echo $files | cut -d: -f1`"
        files="`echo $files | cut -d: -f2-`"
        # copy
        cat "$src" >> "$2" 2> /dev/null
        # add newline if none at end of file
        nl="`echo`"
        [ "$(tail -c1 "$2")" != "$nl" ] && echo >> $2
    done
}
dest="/tmp/jsession-$$"
copy_files "$init" "$dest-init"
init="$dest-init"
copy_files "$noinit" "$dest-noinit"
noinit="$dest-noinit"
# run stuff
cd ~
cat "$init" | while read -r cmd; do
    # skip if a comment or blank
    [ -z "$cmd" ] || [ "${cmd:0:1}" = "#" ] && continue
    # check if in $noinit
    skip=n
    cat "$noinit" | while read -r notcmd; do
        if [ "$cmd" = "$notcmd" ]; then
            skip=y
            break
        fi
    done
    [ "$skip" = y ] && continue
    # run it (can't check if it died because it's backgrounded)
    "$SHELL" -c "$cmd" & < /dev/null
done
# cleanup
rm "$init" "$noinit"

# write PID/display to file
echo $$ $disp >> "$home/running"

# set up trap
do_logout () {
    # child might already have been killed; hide any error
    kill $cpid 2> /dev/null
    exit 0
}
trap do_logout TERM INT

# keep a child running so we can use wait and handle signals without a delay
while true; do
    if [ -z "$cpid" ] || ! ps -p $cpid &> /dev/null ; then
        # child not running
        sleep 3600 &
        cpid=$!
    fi
    wait $cpid
done
