#! /bin/bash

# jsession by J

# Licensed under the GNU General Public License, version 3; if this was not
# included, you can find it here:
#     http://www.gnu.org/licenses/gpl-3.0.txt

# load config
default_conf=/etc/jsession/conf
conf=$1
if [ -z "$conf" ] || ! source "$conf" 2> /dev/null; then
    [ -n "$conf" ] &&
        echo "warning: config file doesn't exist; using defaults" 1>&2
    conf=$default_conf
    source $default_conf 2> /dev/null || {
        echo "error: can't find default config file" 1>&2
        exit 1
    }
fi
# change to conf's directory so it can use relative paths
cd `dirname $conf`
# check we have a display
[ -z $DISPLAY ] && echo "warning: can't determine current display" 1>&2

# TODO: if jsession already running on this display, die

# read lists of stuff to run into temporary files
copy_files () {
    files=$1:
    while [ -n "$files" ]; do
        # get next file
        src=`echo $files | cut -d: -f1`
        files=`echo $files | cut -d: -f2-`
        # copy
        cat $src >> $2 2> /dev/null
        # add newline if none at end of file
        [ `tail -c1 $2` ] && echo >> $2
    done
}
dest=/tmp/jsession-$$
copy_files $init $dest-init
init=$dest-init
copy_files $noinit $dest-noinit
noinit=$dest-noinit
# run stuff
cd ~
cat $init | while read cmd; do
    # skip if a comment or blank
    [ "`echo $cmd | head -c1`" == "#" ] || [ -z "$cmd" ] && continue
    # check if in $noinit
    cat $noinit | while read notcmd; do
        [ "$cmd" == "$notcmd" ] && continue
    done
    # check if command (first word) is on the path
    if [ `type -P \`echo $cmd | cut -d" " -f1\`` ]; then
        # run it
        (eval $cmd &) || echo "warning: failed to run command: $cmd" 1>&2
    else
        echo "warning: command not found: $cmd" 1>&2
    fi
done
# cleanup
rm $init $noinit

dpid=`pidof jsessiond | cut -d" " -f1`
[ -z "$dpid" ] && echo "warning: daemon isn't running" 1>&2

# TODO: remove self from ~/.jsession/running before exiting
do_logout () {
    # child might already have been killed; hide any error
    kill $cpid 2> /dev/null
    exit 0
}
do_halt () {
    kill -USR1 $dpid USR1
    do_logout
}
do_reboot () {
    kill -USR2 $dpid USR2
    do_logout
}

trap do_logout TERM INT
trap do_halt USR1
trap do_reboot USR2

# create config directory if needed and write PID/display to file
mkdir -p ~/.jsession
echo $$ $DISPLAY >> ~/.jsession/running

# TODO: clean up the list - remove entries of no longer running sessions

# keep a child running so we can use wait and handle signals without a delay
while :; do
    if [ ! $cpid ] || [ ! `ps -p $cpid -o pid=` ]; then
        # child not running
        sleep 3600 &
        cpid=$!
    fi
    wait $cpid
done
