#! /bin/bash

# jsession-quit by Joseph Lansdowne

# Licensed under the GNU General Public License, version 3; if this was not
# included, you can find it here:
#     http://www.gnu.org/licenses/gpl-3.0.txt

# systemctl suspend

jsessiond_do () {
    reply="`dbus-send --system --type=method_call --print-reply=literal \
            --dest=prog.jsession /prog/jsession prog.jsession.cmd \
            int16:$1 2>&1`"
    if [ $? -ne 0 ]; then
        if [ "${reply##*: }" = "couldn't run command" ]; then
            echo "error: the command run by jsessiond failed" 1>&2
            return 3
        else
            echo "error: couldn't send a message to jsessiond" 1>&2
            return 2
        fi
    else
        return 0
    fi
}

# handle arguments
for arg in $@; do
    case $arg in
    logout | halt | reboot | suspend)
        if [ -n "$got_arg" ]; then
            echo "error: got more than one command" 1>&2
            exit 1
        fi
        cmd=$arg
        got_arg=1
        ;;
    -a)
        all=1
        ;;
    -h | --help)
        echo "jsession-quit: quit a running jsession.

Usage:

    jsession-quit [-a] cmd

cmd is one of 'logout', 'halt', 'reboot' and 'suspend'.  'logout' accepts the
-a option to log out all running jsessions for the current user (not just the
one on this display).  The latter three commands require that the jsession
daemon be running, if not using systemd.

Returns:

0 on success
1 if the arguments given are invalid
2 if logging out and the session couldn't be determined, or if not running
  systemd and a message couldn't be sent to the jsession daemon
3 if a command run by the jsession daemon failed

    jsession-quit -h
    jsession-quit --help

Display this help."
        exit 0
        ;;
    *)
        echo "error: unknown option '$arg'" 1>&2
        exit 1
        ;;
    esac
done
if [ -z "$cmd" ]; then
    echo "error: expected an argument" 1>&2
    exit 1
fi

if [ "$cmd" = logout ]; then
    # if logging out and got -a, quit all jsessions
    if [ -n "$all" ]; then
        pkill jsession$
    elif [ -n "$DISPLAY" ]; then
        # get this display's jsession PID
        disp=`echo $DISPLAY | cut -d"." -f1`
        pids=`grep $disp ~/.jsession/running | cut -d" " -f1 2> /dev/null`
        numpids=`echo $pids | wc -w`
        if [ $numpids -eq 0 ]; then
            echo "error: couldn't determine the current jsession" 1>&2
            exit 2
        fi
        # send TERM to first PID that corresponds to a jsession, if any
        for pid in $pids; do
            name=`ps -p $pid -o comm= 2> /dev/null`
            if [ "$name" = jsession ]; then
                # send signal
                kill $pid
                exit 0
            fi
        done
        # didn't find anything
        echo "error: couldn't determine the current jsession" 1>&2
        exit 2
    else
        echo "error: couldn't determine the current display" 1>&2
        exit 2
    fi
else
    if [ "$cmd" = halt ]; then
        code=1
        systemctl poweroff
    elif [ "$cmd" = reboot ]; then
        code=2
        systemctl reboot
    else # $cmd is suspend
        code=3
        systemctl suspend
    fi || jsessiond_do $code || exit $?
fi
